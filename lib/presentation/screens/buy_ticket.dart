import 'package:flutter/material.dart';
import 'package:moviebooker/core/colors.dart';
import 'package:moviebooker/data/models/show_time.dart';
import 'package:moviebooker/presentation/screens/select_seat_screen.dart';
import 'package:moviebooker/presentation/widgets/screen_widget.dart';
import 'package:moviebooker/presentation/widgets/seat_available_grid.dart';
import 'package:moviebooker/utils/date_formatter.dart';

class BuyTicketScreen extends StatefulWidget {
  final String movieName, releaseDate;

  BuyTicketScreen({
    Key? key,
    required this.movieName,
    required this.releaseDate,
  }) : super(key: key);

  @override
  State<BuyTicketScreen> createState() => _BuyTicketScreenState();
}

class _BuyTicketScreenState extends State<BuyTicketScreen> {
  DateTime releaseDate2 = DateTime(2025, 3, 1);
  List<DateTime> availableDates = [];
  int selectedDateIndex = 0;
  int? selectedHallIndex;
  final List<Showtime> showtimes = [
    Showtime(
      time: "12:30",
      hall: "Cinetech + Hall 1",
      price: "50\$",
      bonus: "2500 bonus",
    ),
    Showtime(
      time: "13:30",
      hall: "Cinetech + Hall 2",
      price: "75\$",
      bonus: "3000 bonus",
    ),
  ];

  List<List<List<int>>> hallLayouts = [
    // Hall 1 layout (14 rows, 26 columns)
    [
      [
        -1,
        -1,
        -1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        -1,
        -1,
        -1,
      ],
      [
        -1,
        -1,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        -1,
        -1,
      ],
      [
        -1,
        -1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        -1,
        -1,
      ],
      [
        -1,
        -1,
        0,
        0,
        0,
        -1,
        -1,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        -1,
        -1,
      ],
      [
        2,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        2,
      ],
      [
        1,
        0,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        0,
        2,
      ],
      [
        3,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        2,
      ],
      [
        3,
        3,
        3,
        3,
        3,
        -1,
        -1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        -1,
        -1,
        3,
        3,
        3,
        3,
        2,
      ],
      [
        2,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        2,
      ],
      [
        2,
        0,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        0,
        2,
      ],
      [
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        2,
      ],
      [
        1,
        1,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        2,
        2,
      ],
      [
        2,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        2,
        2,
      ],
      [
        -1,
        1,
        0,
        0,
        -1,
        -1,
        -1,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        -1,
        0,
        0,
        0,
        -1,
      ],
    ],
    // Hall 2 layout ()
    [
      [
        -1,
        -1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        -1,
        -1,
      ],
      [
        -1,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        -1,
      ],
      [
        -1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        -1,
      ],
      [
        -1,
        0,
        2,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        2,
        0,
        -1,
      ],
      [
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
      ],
      [
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
      ],
      [
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
      ],
      [
        3,
        3,
        3,
        3,
        -1,
        3,
        3,
        3,
        3,
        3,
        3,
        -1,
        -1,
        3,
        3,
        3,
        3,
        3,
        3,
        -1,
        3,
        3,
        3,
        3,
      ],
      [
        2,
        2,
        2,
        2,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        2,
        2,
        2,
        2,
      ],
      [
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        -1,
        0,
        0,
        0,
        0,
        0,
        0,
        -1,
        0,
        0,
        0,
        0,
      ],
      [
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        1,
      ],
    ],
  ];

  @override
  void initState() {
    super.initState();
    releaseDate2 = convertToDateComponents(widget.releaseDate);

    _generateAvailableDates();
  }

  void _generateAvailableDates() {
    for (int i = 0; i < 30; i++) {
      availableDates.add(releaseDate2.add(Duration(days: i)));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.white,
        title: Column(
          children: [
            Text(
              widget.movieName,
              style: TextStyle(
                color: AppColors.lightBlack,
                fontWeight: FontWeight.w300,
              ),
            ),
            SizedBox(height: 5),
            Text(
              'In Theaters ${widget.releaseDate}',
              style: TextStyle(
                color: AppColors.lightBlue,
                fontSize: 14,
                fontWeight: FontWeight.w400,
              ),
            ),
          ],
        ),
        iconTheme: IconThemeData(color: Colors.black),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      "Date",
                      style: TextStyle(
                        fontSize: 22,
                        color: Colors.black,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    SizedBox(height: 10),
                    _buildDateSelector(),
                    SizedBox(height: 20),
                    _buildShowtimeList(),
                  ],
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(
                horizontal: 16.0,
                vertical: 10,
              ),
              child: _buildSelectSeatsButton(
                widget.movieName,
                widget.releaseDate,
                showtimes[selectedHallIndex ?? 0].hall,
                showtimes[selectedHallIndex ?? 0].time,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDateSelector() {
    return SizedBox(
      height: 50,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: availableDates.length,
        itemBuilder: (context, index) {
          bool isSelected = selectedDateIndex == index;
          return GestureDetector(
            onTap: () {
              setState(() {
                selectedDateIndex = index;
              });
            },
            child: Container(
              padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
              margin: EdgeInsets.only(right: 8),
              decoration: BoxDecoration(
                color: isSelected ? AppColors.lightBlue : AppColors.lightPurple,
                borderRadius: BorderRadius.circular(20),
              ),
              child: Center(
                child: Text(
                  "${availableDates[index].day} ${_getMonthName(availableDates[index].month)}",
                  style: TextStyle(
                    color: isSelected ? Colors.white : Colors.black,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildShowtimeTile(
    int index,
    String time,
    String hall,
    String price,
    String bonus,
  ) {
    bool isSelected = selectedHallIndex == index;

    return GestureDetector(
      onTap: () {
        setState(() {
          selectedHallIndex = index;
        });
      },
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              Text(
                time + " ",
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
              ),
              Text(hall, style: TextStyle(fontSize: 14, color: Colors.grey)),
            ],
          ),
          SizedBox(height: 5),
          Container(
            padding: EdgeInsets.all(16),
            height: 240,
            decoration: BoxDecoration(
              border: Border.all(color: isSelected ? Colors.blue : Colors.grey),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [SeatAvailableGrid(seatLayout: hallLayouts[index])],
            ),
          ),
          SizedBox(height: 5),
          Row(
            children: [
              Text(
                "From $price",
                style: TextStyle(fontSize: 14, fontWeight: FontWeight.w500),
              ),
              Text(" or ", style: TextStyle(fontSize: 14, color: Colors.grey)),
              Text(
                bonus,
                style: TextStyle(fontSize: 14, color: AppColors.lightBlue),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildShowtimeList() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SizedBox(height: 25),
        SizedBox(
          height: 370,
          child: ListView(
            scrollDirection: Axis.horizontal,
            children:
                showtimes.map((showtime) {
                  int index = showtimes.indexOf(showtime);
                  return Padding(
                    padding: const EdgeInsets.only(right: 15),
                    child: _buildShowtimeTile(
                      index,
                      showtime.time,
                      showtime.hall,
                      showtime.price,
                      showtime.bonus,
                    ),
                  );
                }).toList(),
          ),
        ),
      ],
    );
  }

  Widget _buildSelectSeatsButton(
    String movieName,
    String releaseDate,
    String hall,
    String Time,
  ) {
    return ElevatedButton(
      onPressed: () {
        if (selectedHallIndex != null) {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder:
                  (context) => SelectSeatScreen(
                    seatLayout: hallLayouts[selectedHallIndex ?? 0],
                    hallIndex: selectedHallIndex!,
                    hallName: hall,
                    movieName: movieName,
                    time: showtimes[selectedHallIndex!].time,
                    date: availableDates[selectedDateIndex].toString(),
                  ),
            ),
          );
        }
      },
      style: ElevatedButton.styleFrom(
        padding: EdgeInsets.symmetric(vertical: 16),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        backgroundColor: AppColors.lightBlue,
      ),
      child: Center(
        child: Text(
          "Select Seats",
          style: TextStyle(fontSize: 16, color: Colors.white),
        ),
      ),
    );
  }

  String _getMonthName(int month) {
    const months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ];
    return months[month - 1];
  }
}
